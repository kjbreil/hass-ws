// Code generated by jsonenums -type=Repeat; DO NOT EDIT.

package services

import (
	"fmt"
	"github.com/goccy/go-json"
)

var (
	_RepeatNameToValue = map[string]Repeat{
		"Repeatall": Repeatall,
		"Repeatoff": Repeatoff,
		"Repeatone": Repeatone,
	}

	_RepeatValueToName = map[Repeat]string{
		Repeatall: "Repeatall",
		Repeatoff: "Repeatoff",
		Repeatone: "Repeatone",
	}
)

func init() {
	var v Repeat
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_RepeatNameToValue = map[string]Repeat{
			interface{}(Repeatall).(fmt.Stringer).String(): Repeatall,
			interface{}(Repeatoff).(fmt.Stringer).String(): Repeatoff,
			interface{}(Repeatone).(fmt.Stringer).String(): Repeatone,
		}
	}
}

// MarshalJSON is generated so Repeat satisfies json.Marshaler.
func (r Repeat) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _RepeatValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Repeat: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Repeat satisfies json.Unmarshaler.
func (r *Repeat) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Repeat should be a string, got %s", data)
	}
	v, ok := _RepeatNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Repeat %q", s)
	}
	*r = v
	return nil
}
