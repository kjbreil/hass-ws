// Code generated by jsonenums -type=Direction; DO NOT EDIT.

package services

import (
	"fmt"
	"github.com/goccy/go-json"
)

var (
	_DirectionNameToValue = map[string]Direction{
		"Directionforward": Directionforward,
		"Directionreverse": Directionreverse,
	}

	_DirectionValueToName = map[Direction]string{
		Directionforward: "Directionforward",
		Directionreverse: "Directionreverse",
	}
)

func init() {
	var v Direction
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_DirectionNameToValue = map[string]Direction{
			interface{}(Directionforward).(fmt.Stringer).String(): Directionforward,
			interface{}(Directionreverse).(fmt.Stringer).String(): Directionreverse,
		}
	}
}

// MarshalJSON is generated so Direction satisfies json.Marshaler.
func (r Direction) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _DirectionValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Direction: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Direction satisfies json.Unmarshaler.
func (r *Direction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Direction should be a string, got %s", data)
	}
	v, ok := _DirectionNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Direction %q", s)
	}
	*r = v
	return nil
}
