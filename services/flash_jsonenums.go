// Code generated by jsonenums -type=Flash; DO NOT EDIT.

package services

import (
	"fmt"
	"github.com/goccy/go-json"
)

var (
	_FlashNameToValue = map[string]Flash{
		"Flashlong":  Flashlong,
		"Flashshort": Flashshort,
	}

	_FlashValueToName = map[Flash]string{
		Flashlong:  "Flashlong",
		Flashshort: "Flashshort",
	}
)

func init() {
	var v Flash
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FlashNameToValue = map[string]Flash{
			interface{}(Flashlong).(fmt.Stringer).String():  Flashlong,
			interface{}(Flashshort).(fmt.Stringer).String(): Flashshort,
		}
	}
}

// MarshalJSON is generated so Flash satisfies json.Marshaler.
func (r Flash) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FlashValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Flash: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Flash satisfies json.Unmarshaler.
func (r *Flash) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Flash should be a string, got %s", data)
	}
	v, ok := _FlashNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Flash %q", s)
	}
	*r = v
	return nil
}
