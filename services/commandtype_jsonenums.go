// Code generated by jsonenums -type=CommandType; DO NOT EDIT.

package services

import (
	"fmt"
	"github.com/goccy/go-json"
)

var (
	_CommandTypeNameToValue = map[string]CommandType{
		"CommandTypeir": CommandTypeir,
		"CommandTyperf": CommandTyperf,
	}

	_CommandTypeValueToName = map[CommandType]string{
		CommandTypeir: "CommandTypeir",
		CommandTyperf: "CommandTyperf",
	}
)

func init() {
	var v CommandType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_CommandTypeNameToValue = map[string]CommandType{
			interface{}(CommandTypeir).(fmt.Stringer).String(): CommandTypeir,
			interface{}(CommandTyperf).(fmt.Stringer).String(): CommandTyperf,
		}
	}
}

// MarshalJSON is generated so CommandType satisfies json.Marshaler.
func (r CommandType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _CommandTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid CommandType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so CommandType satisfies json.Unmarshaler.
func (r *CommandType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CommandType should be a string, got %s", data)
	}
	v, ok := _CommandTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid CommandType %q", s)
	}
	*r = v
	return nil
}
